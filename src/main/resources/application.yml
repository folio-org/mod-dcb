server:
  port: 8081
spring:
  application:
    name: mod-dcb
  datasource:
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:db}
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:${KAFKA_PORT:9092}
    security:
      protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    ssl:
        key-store-password: ${KAFKA_SSL_KEYSTORE_PASSWORD:}
        key-store-location: ${KAFKA_SSL_KEYSTORE_LOCATION:}
        trust-store-password: ${KAFKA_SSL_TRUSTSTORE_PASSWORD:}
        trust-store-location: ${KAFKA_SSL_TRUSTSTORE_LOCATION:}
  sql:
    init:
      # to boot up application despite of any DB connection issues
      continue-on-error: true
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL10Dialect
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: false
  liquibase:
    enabled: true
    change-log: classpath:db/changelog/changelog-master.xml
  jackson:
    default-property-inclusion: non_null
    deserialization:
      fail-on-unknown-properties: false
      accept-single-value-as-array: true
  mustache:
    check-template-location: false
  cloud:
    openfeign:
      okhttp:
        enabled: true
folio:
  tenant:
    validation:
      enabled: true
  kafka:
    numberOfPartitions: ${NUMBER_OF_PARTITIONS:1}
    replicationFactor: ${REPLICATION_FACTOR:1}
    listener:
      check-in:
        concurrency: ${KAFKA_EVENTS_CONCURRENCY:5}
        topic-pattern: ${KAFKA_EVENTS_CONSUMER_PATTERN:(${folio.environment}\.)[a-zA-z0-9-]+\.\w+\.check-in}
        group-id: ${folio.environment}-mod-dcb-group
      loan:
        concurrency: ${KAFKA_EVENTS_CONCURRENCY:5}
        topic-pattern: ${KAFKA_EVENTS_CONSUMER_PATTERN:(${folio.environment}\.)[a-zA-z0-9-]+\.\w+\.loan}
        group-id: ${folio.environment}-mod-dcb-group
      request:
        concurrency: ${KAFKA_EVENTS_CONCURRENCY:5}
        topic-pattern: ${KAFKA_EVENTS_CONSUMER_PATTERN:(${folio.environment}\.)[a-zA-z0-9-]+\.\w+\.request}
        group-id: ${folio.environment}-mod-dcb-group
  system-user:
    enabled: ${SYSTEM_USER_ENABLED:true}
    username: ${SYSTEM_USER_NAME:dcb-system-user}
    password: ${SYSTEM_USER_PASSWORD}
    lastname: System
    permissionsFilePath: permissions/mod-dcb.csv
  environment: ${ENV:folio}
  okapi-url: ${OKAPI_URL:http://okapi:9130}
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_EXPOSURE:health,info,loggers}
      base-path: /admin
  #  endpoint:
  #    health:
  #      show-details: always
  #      show-components: always
  ###################################################
  # Disable all checks except for readiness
  ###################################################
  health:
    defaults:
      access: read-only
    readinessstate:
      access: unrestricted

application:
  shadow-location-lookup-enabled: ${SHADOW_LOCATION_LOOKUP_ENABLED:true}
  dcb-hub:
    fetch-dcb-locations-enabled: ${FETCH_DCB_LOCATIONS_ENABLED:true}
    locations-url: ${DCB_LOCATIONS_BASE_URL:https://folio-edev-volaris-mockserver.ci.folio.org}
    batch-size: ${DCB_LOCATIONS_BATCH_SIZE:5}
    secure-store-keyname: dcb-hub-credentials
  keycloak:
    tls:
      enabled: ${KC_CLIENT_TLS_ENABLED:false}
      trust-store-path: ${KC_CLIENT_TLS_TRUSTSTORE_PATH:}
      trust-store-password: ${KC_CLIENT_TLS_TRUSTSTORE_PASSWORD:}
      trust-store-type: ${KC_CLIENT_TLS_TRUSTSTORE_TYPE:}
  secret-store:
    type: ${SECRET_STORE_TYPE:EPHEMERAL}
    ephemeral:
      content:
        dcb-hub-credentials: >-
          ${DCB_HUB_CREDENTIALS:{"client_id": "test", "client_secret": "test", "username": "test", "password": "test", "keycloak_url": "https://folio-edev-volaris-mockserver.ci.folio.org/realms/master/protocol/openid-connect/token"}}
    aws-ssm:
      region: ${SECRET_STORE_AWS_SSM_REGION:}
      use-iam: ${SECRET_STORE_AWS_SSM_USE_IAM:true}
      ecs-credentials-endpoint: ${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_ENDPOINT:}
      ecs-credentials-path: ${SECRET_STORE_AWS_SSM_ECS_CREDENTIALS_PATH:}
    vault:
      token: ${SECRET_STORE_VAULT_TOKEN:}
      address: ${SECRET_STORE_VAULT_ADDRESS:}
      enable-ssl: ${SECRET_STORE_VAULT_ENABLE_SSL:false}
      pem-file-path: ${SECRET_STORE_VAULT_PEM_FILE_PATH:}
      keystore-password: ${SECRET_STORE_VAULT_KEYSTORE_PASSWORD:}
      keystore-file-path: ${SECRET_STORE_VAULT_KEYSTORE_FILE_PATH:}
      truststore-file-path: ${SECRET_STORE_VAULT_TRUSTSTORE_FILE_PATH:}
    fssp:
      address: ${SECRET_STORE_FSSP_ADDRESS:}
      secret-path: ${SECRET_STORE_FSSP_SECRET_PATH:secure-store/entries}
      enable-ssl: ${SECRET_STORE_FSSP_ENABLE_SSL:false}
      trust-store-path: ${SECRET_STORE_FSSP_TRUSTSTORE_PATH:}
      trust-store-file-type: ${SECRET_STORE_FSSP_TRUSTSTORE_FILE_TYPE:}
      trust-store-password: ${SECRET_STORE_FSSP_TRUSTSTORE_PASSWORD:}

debug: false
